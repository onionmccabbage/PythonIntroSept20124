Python Introduction September 2024

Toby Dussek

9:30  start
11:00 morning break
12:30 lunch until 1:30
3:00  afternoon break
4:30  end

The course website
https://s3.eu-west-1.amazonaws.com/neueda.conygre.com/Sites/Programming_in_Python/site/index.html
All my code will be here: https://github.com/onionmccabbage/PythonIntroSept20124

Python is written in C

Monday
> Welcome and intros
> where to write code: module (just a file) or immediate python
> architecture, structure, and professional code best practice
> print() and input()
> maths operators and data types
> indentation
> immutable strings
> print formatting
> lists and tuples
- memory efficiency
- identifiers
> boolean True and False
> type and type conversion
> the if statement for conditional logic
> for, while, break and pass
> validate input
> string manipulation
> using random
> after lunch review exercise
> dictionaries (non-numeric indexed iterable collections)
- import, pip, libraries and modules
> functions
> if __name__ == '__main__'

q - use with Django

Tuesday
> how to access course recordings
  see course website, authenticate with
  Username: student
  Password: Belfast2024
  only available for a week or so
  BIG files
> quick review of where we got to
> sys.path
> venv see https://docs.python.org/3/tutorial/venv.html
> __init__.py - no longer needed (but is needed in Py2)
> sets
- range, generators
- comprehensions
> passing command-line arguments (which are ALWAYS strings)
> to add libraries to python:
  - python -m ensurepip
  - python â€“m pip install requests (or any other library you need)
> using requests (to access web API via HTTP)
> strings with triple quotes
> exception handling (try-except etc.)
- debug tools
- review exercise
> File input and output
  > bytefiles
  > elegant close...

Wednesday
- brief review so far
- functions, *args, **kwargs  
  - positional arguments and keyword arguments
- functions live in classes, which live in modules which live in packages
- show ternary
- PEP8 style guide
- custom generator and yield
> global and local scope 
- data modelling structures: 
    use built-in structures until they do not suit the purpose (then use classes)
- Objects and Classes (OOP)
- __slots__
- get/set as property decorators @property
- name mangling (__) and slots
- properties, methods, __str__
- intrinsic attributes: __doc__ etc.
- special operators and overriding
- inheritance
- review exercise


- where to go from here:
  https://learnpython.org/
  https://pynative.com/python-exercises-with-solutions/
  the next courses: advanced python then further advanced python
- end of course feedback

Links
- Python official site https://python.org
- PEP8 style guide https://www.python.org/dev/peps/pep-0008/
